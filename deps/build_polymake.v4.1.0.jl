using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))

products = Product[
    LibraryProduct(prefix, "libpolymake", :libpolymake)
    ExecutableProduct(prefix,"polymake", :polymake)
    ExecutableProduct(prefix,"polymake-config", Symbol("polymake_config"))
]

# Download binaries from hosted location
bin_prefix = "https://github.com/benlorenz/polymake_jll.jl/releases/download/polymake-v4.1.0+0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    MacOS(:x86_64, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/polymake.v4.1.0.x86_64-apple-darwin14-cxx03.tar.gz", "5f57b69067cf618b65a841c5bdf05a47983989557abec3386fbdb590ac15642b"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc6, :cxx11)) => ("$bin_prefix/polymake.v4.1.0.x86_64-linux-gnu-gcc6-cxx11.tar.gz", "ccb4a44242a20e3b377fb46d0933d0d696e8f4b0657610ba155e97a3d48a2b25"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc7, :cxx11)) => ("$bin_prefix/polymake.v4.1.0.x86_64-linux-gnu-gcc7-cxx11.tar.gz", "aa2c294c1166d047fec55414d47cd423d8f0040c789dfff726b329e4ecb6cc9d"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc8, :cxx11)) => ("$bin_prefix/polymake.v4.1.0.x86_64-linux-gnu-gcc8-cxx11.tar.gz", "132f2e9455fadb333b392d584b51722e3fc2d8a1fe733c43a36a98662f8ff97f"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
