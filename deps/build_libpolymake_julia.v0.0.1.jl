using BinaryProvider # requires BinaryProvider 0.3.0 or later
import Libdl.dlext

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    FileProduct(prefix, joinpath("lib","libpolymake_julia.$(dlext)"), :libpolymake_julia),
    FileProduct(prefix, joinpath("share","libpolymake_julia","type_translator.jl"), :type_translator)
]

# Download binaries from hosted location
bin_prefix = "https://github.com/benlorenz/libpolymake_julia_jll.jl/releases/download/libpolymake_julia-v0.0.1+0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    MacOS(:x86_64, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/libpolymake_julia.v0.0.1.x86_64-apple-darwin14.tar.gz", "73171e1d5bdd62773608c748e5dd92650f7b8cf66145ed4dd2709af16070a8eb"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc6, :cxx11)) => ("$bin_prefix/libpolymake_julia.v0.0.1.x86_64-linux-gnu-gcc6-cxx11.tar.gz", "c3a491f4273abb5ff42539a468df2a36634c9a6c6b93bd85d06a97d16603a021"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc7, :cxx11)) => ("$bin_prefix/libpolymake_julia.v0.0.1.x86_64-linux-gnu-gcc7-cxx11.tar.gz", "3d64d1196eded558c6e16f1ecb1cbb6541a2e3571d6fbda48aa6af54b71cc8ab"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc8, :cxx11)) => ("$bin_prefix/libpolymake_julia.v0.0.1.x86_64-linux-gnu-gcc8-cxx11.tar.gz", "0f3dd9990380cbb1eedae906cd1d17cb1e60bebcf82960dcf3ccd8fe5072d17c"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
