using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))

products = Product[
    LibraryProduct(prefix, "libpolymake", :libpolymake)
    ExecutableProduct(prefix,"polymake", :polymake)
    ExecutableProduct(prefix,"polymake-config", Symbol("polymake_config"))
]

# Download binaries from hosted location
bin_prefix = "https://github.com/benlorenz/polymake_jll.jl/releases/download/polymake-v4.1.1+0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:i686, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/polymake.v4.1.1.i686-linux-gnu-cxx03.tar.gz", "ca75f900f5ad788070667198cb70aca76de94c5a4083435b1fd97b1ab5937ba6"),
    Linux(:i686, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/polymake.v4.1.1.i686-linux-gnu-cxx11.tar.gz", "323c791c71fa5c61778c6568aa456bd7a37fbc616b7f3e47b1422ca5197e5cc0"),
    MacOS(:x86_64, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/polymake.v4.1.1.x86_64-apple-darwin14-cxx03.tar.gz", "1580f847dd0ba971951074dd31884c235d62df092ed70084cc080c1b202a3826"),
    MacOS(:x86_64, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/polymake.v4.1.1.x86_64-apple-darwin14-cxx11.tar.gz", "09d45b0b79d84ae2358ea3cb5e427a0f4c21142ebcadcf936e85e5c8994946c3"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/polymake.v4.1.1.x86_64-linux-gnu-cxx03.tar.gz", "e84dc07ec07be7cbf14655842bbceb51feeb829135f4091a8bdcc2bec5aef72c"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/polymake.v4.1.1.x86_64-linux-gnu-cxx11.tar.gz", "ad8992671cb6b333241bd9737d0ffb2df9085033c2668e34cabbe95b11279d6e"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
