using BinaryProvider # requires BinaryProvider 0.3.0 or later
import Libdl.dlext

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    ExecutableProduct(prefix, "polymake_run_script", :polymake_run_script),
    FileProduct(prefix, joinpath("lib","libpolymake_julia.$(dlext)"), :libpolymake_julia),
    FileProduct(prefix, joinpath("share","libpolymake_julia","type_translator.jl"), :type_translator)
]

# Download binaries from hosted location
bin_prefix = "https://github.com/benlorenz/libpolymake_julia_jll.jl/releases/download/libpolymake_julia-v0.0.2+0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    MacOS(:x86_64, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/libpolymake_julia.v0.0.2.x86_64-apple-darwin14-cxx03.tar.gz", "5a6626c2d03a2cb8833cc7bf03753bc7e0536fd7b6bf793adc31e7b8d620123f"),
    MacOS(:x86_64, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/libpolymake_julia.v0.0.2.x86_64-apple-darwin14-cxx11.tar.gz", "5a6626c2d03a2cb8833cc7bf03753bc7e0536fd7b6bf793adc31e7b8d620123f"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/libpolymake_julia.v0.0.2.x86_64-linux-gnu-cxx11.tar.gz", "28e70589f95703d64d072d920e5b2fe5fb69261d019ee550585964768192641b"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
