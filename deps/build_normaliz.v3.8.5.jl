using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libnormaliz"], :libnormaliz),
    ExecutableProduct(prefix, "normaliz", :normaliz),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/normaliz_jll.jl/releases/download/normaliz-v3.8.5+0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/normaliz.v3.8.5.aarch64-linux-gnu-cxx03.tar.gz", "a99a0dcbf22a22538f710020fd2556b3cdf50375cccc3e0cabfd8cce22bcf311"),
    Linux(:aarch64, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/normaliz.v3.8.5.aarch64-linux-gnu-cxx11.tar.gz", "af52d800311da24e313ee45370109efc6e47fcbf46da1914c11b05c6c26c5703"),
    Linux(:aarch64, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/normaliz.v3.8.5.aarch64-linux-musl-cxx03.tar.gz", "8c83ee40060b362f74965821dc5c92feedfbd7db93df3237aab88bd67396b0e9"),
    Linux(:aarch64, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/normaliz.v3.8.5.aarch64-linux-musl-cxx11.tar.gz", "96d92954fd5c31a3efdf6a970b49dc060b6a43e31550b5f9b4295c01ad22dc37"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/normaliz.v3.8.5.armv7l-linux-gnueabihf-cxx03.tar.gz", "4828b0c63b97c69f6a28c8885735d082f90f9dd950a4446ff81df431478fc7aa"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/normaliz.v3.8.5.armv7l-linux-gnueabihf-cxx11.tar.gz", "eb4c72eeccf957ebe7b700aa94c1ad4b849e9c1b66c52b601cbdc6e90eba274a"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/normaliz.v3.8.5.armv7l-linux-musleabihf-cxx03.tar.gz", "308701cfdeb94ec0f5c8a8724c52916b2c976337df71671e565c2a060d707cc2"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/normaliz.v3.8.5.armv7l-linux-musleabihf-cxx11.tar.gz", "4a4c6dac7d638345f46b5ffb21239702534ac714cf0570894cd89fd760e0ad78"),
    Linux(:i686, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/normaliz.v3.8.5.i686-linux-gnu-cxx03.tar.gz", "e4ae21c8c57f826daab72bf49397b6e7e0c845d1c4ca8aec8cae0b23646bc2a1"),
    Linux(:i686, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/normaliz.v3.8.5.i686-linux-gnu-cxx11.tar.gz", "f513c5c8fe3ae07c3cc75278c814fd2b3301a9891c61c0ba9b068c03576d408e"),
    Linux(:i686, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/normaliz.v3.8.5.i686-linux-musl-cxx03.tar.gz", "3cca91840cf0edb01e7eb66949d32db0d19fbe3c1b6ccb9a1b4612e8b2c62593"),
    Linux(:i686, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/normaliz.v3.8.5.i686-linux-musl-cxx11.tar.gz", "5b178bcda4c3407533eec1d215a62524aca36ad673187b6b645d779ac2bf34d9"),
    Linux(:powerpc64le, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/normaliz.v3.8.5.powerpc64le-linux-gnu-cxx03.tar.gz", "2b549e74754a6309d72f43821b80c9bec272de863367e8a48faaff3ffe426e1e"),
    Linux(:powerpc64le, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/normaliz.v3.8.5.powerpc64le-linux-gnu-cxx11.tar.gz", "29148d68efea35ff086f53aad429d6742df7a4f7200d0364dbb1f62d7c056249"),
    MacOS(:x86_64, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/normaliz.v3.8.5.x86_64-apple-darwin14-cxx03.tar.gz", "b298f52c228615802ed15f59342b11d2386402e7f569ca72a7bed22278b73163"),
    MacOS(:x86_64, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/normaliz.v3.8.5.x86_64-apple-darwin14-cxx11.tar.gz", "0c278f97055a9d611c63ab4a568fd361dd2ad538cc4c5f2025278b458e508ce4"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/normaliz.v3.8.5.x86_64-linux-gnu-cxx03.tar.gz", "d8e30ce7a5010e96ba6ad58b5a21d983579ec24f683a3ae7daf11d92c118f31d"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/normaliz.v3.8.5.x86_64-linux-gnu-cxx11.tar.gz", "f503c66eabdb588bb9e8cb945ec18b65a389d6a58e1e68d4651d307eb3ef1147"),
    Linux(:x86_64, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/normaliz.v3.8.5.x86_64-linux-musl-cxx03.tar.gz", "a1f46beebc076d4a08c9a07512bac66fa6df0b6b23146614005b5b05921698e3"),
    Linux(:x86_64, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/normaliz.v3.8.5.x86_64-linux-musl-cxx11.tar.gz", "c3d290f32d2e40e1a7bf83ecafa3937f6d1fc4554d64c1f147538457267cbb48"),
    FreeBSD(:x86_64, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/normaliz.v3.8.5.x86_64-unknown-freebsd11.1-cxx03.tar.gz", "146a726e933c7b933cb54530a7e45f8807c1d93859c70aa72c9c4b009b2adce3"),
    FreeBSD(:x86_64, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/normaliz.v3.8.5.x86_64-unknown-freebsd11.1-cxx11.tar.gz", "4bf3736af7f7cdb7f1d49765e728795b4b9fba307ad71648c9dc2b4619173fc7"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
