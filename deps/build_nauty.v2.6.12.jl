using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libnauty"], :libnauty),
    LibraryProduct(prefix, ["libnautyA1"], :libnautyA1),
    LibraryProduct(prefix, ["libnautyL0"], :libnautyL0),
    LibraryProduct(prefix, ["libnautyL1"], :libnautyL1),
    LibraryProduct(prefix, ["libnautyS0"], :libnautyS0),
    LibraryProduct(prefix, ["libnautyS1"], :libnautyS1),
    LibraryProduct(prefix, ["libnautyW0"], :libnautyW0),
    LibraryProduct(prefix, ["libnautyW1"], :libnautyW1),
    ExecutableProduct(prefix, "NRswitchg", :NRswitchg),
    ExecutableProduct(prefix, "addedgeg", :addedgeg),
    ExecutableProduct(prefix, "amtog", :amtog),
    ExecutableProduct(prefix, "biplabg", :biplabg),
    ExecutableProduct(prefix, "blisstog", :blisstog),
    ExecutableProduct(prefix, "catg", :catg),
    ExecutableProduct(prefix, "checks6", :checks6),
    ExecutableProduct(prefix, "complg", :complg),
    ExecutableProduct(prefix, "converseg", :converseg),
    ExecutableProduct(prefix, "copyg", :copyg),
    ExecutableProduct(prefix, "countg", :countg),
    ExecutableProduct(prefix, "cubhamg", :cubhamg),
    ExecutableProduct(prefix, "deledgeg", :deledgeg),
    ExecutableProduct(prefix, "delptg", :delptg),
    ExecutableProduct(prefix, "directg", :directg),
    ExecutableProduct(prefix, "dreadnaut", :dreadnaut),
    ExecutableProduct(prefix, "dretodot", :dretodot),
    ExecutableProduct(prefix, "dretog", :dretog),
    ExecutableProduct(prefix, "genbg", :genbg),
    ExecutableProduct(prefix, "genbgL", :genbgL),
    ExecutableProduct(prefix, "geng", :geng),
    ExecutableProduct(prefix, "genquarticg", :genquarticg),
    ExecutableProduct(prefix, "genrang", :genrang),
    ExecutableProduct(prefix, "genspecialg", :genspecialg),
    ExecutableProduct(prefix, "gentourng", :gentourng),
    ExecutableProduct(prefix, "gentreeg", :gentreeg),
    ExecutableProduct(prefix, "hamheuristic", :hamheuristic),
    ExecutableProduct(prefix, "labelg", :labelg),
    ExecutableProduct(prefix, "linegraphg", :linegraphg),
    ExecutableProduct(prefix, "listg", :listg),
    ExecutableProduct(prefix, "multig", :multig),
    ExecutableProduct(prefix, "newedgeg", :newedgeg),
    ExecutableProduct(prefix, "pickg", :pickg),
    ExecutableProduct(prefix, "planarg", :planarg),
    ExecutableProduct(prefix, "ranlabg", :ranlabg),
    ExecutableProduct(prefix, "shortg", :shortg),
    ExecutableProduct(prefix, "showg", :showg),
    ExecutableProduct(prefix, "subdivideg", :subdivideg),
    ExecutableProduct(prefix, "sumlines", :sumlines),
    ExecutableProduct(prefix, "twohamg", :twohamg),
    ExecutableProduct(prefix, "vcolg", :vcolg),
    ExecutableProduct(prefix, "watercluster2", :watercluster2),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/nauty_jll.jl/releases/download/nauty-v2.6.12+0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/nauty.v2.6.12.aarch64-linux-gnu.tar.gz", "650a9412d6c94fa79b737e24c10ec215d0366b33df5d84165f9b7ac6fb18f9e8"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/nauty.v2.6.12.aarch64-linux-musl.tar.gz", "dcdcc83713ff65266404573123e9fde7f9182cfc70bfa4e7a6ce0b1392793bd0"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/nauty.v2.6.12.armv7l-linux-gnueabihf.tar.gz", "a4de2b994f9d71998c1acc7835f6cfdf2a34eedc4a3b4fc3901974918ec10961"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/nauty.v2.6.12.armv7l-linux-musleabihf.tar.gz", "a7fafd55f31edf7f517f095ea1eb3dca272a080f345f1e9849b5d5735da3d8fa"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/nauty.v2.6.12.i686-linux-gnu.tar.gz", "cedc51c75b6a2cb3baae4f07068116f26671db0b5699a21a210d35de73262c39"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/nauty.v2.6.12.i686-linux-musl.tar.gz", "8dd5d3ad6eb0c38a2feaebf43133cf49a66cc2cb609e8d186a1ed21621c92dc3"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/nauty.v2.6.12.powerpc64le-linux-gnu.tar.gz", "c1324c66c141b9dbf31d99cec78dbafb4ea4e8bcf396d98e009f70e616410ab7"),
    MacOS(:x86_64) => ("$bin_prefix/nauty.v2.6.12.x86_64-apple-darwin14.tar.gz", "4464b165292b04c8df69527456365907e7af474dfde9e312ffc750d09cb2c3d0"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/nauty.v2.6.12.x86_64-linux-gnu.tar.gz", "c1aa848aad48754d324f0f660feed3c493efeff4fbd585f84b7aed3ef4f4f0d8"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/nauty.v2.6.12.x86_64-linux-musl.tar.gz", "7f1c1e5a162aedc4e91d456b8889f09ddeb5d613c8bbcea11602583fff75f1c9"),
    FreeBSD(:x86_64) => ("$bin_prefix/nauty.v2.6.12.x86_64-unknown-freebsd11.1.tar.gz", "dbad1885eaebd0b364a9d499c1a2a48ed587459396be991ba5ffc76a0f1becf4"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
