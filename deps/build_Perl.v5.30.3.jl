using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    ExecutableProduct(prefix, "perl", :perl),
    LibraryProduct(prefix, ["libperl"], :libperl),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/Perl_jll.jl/releases/download/Perl-v5.30.3+0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:i686, libc=:glibc) => ("$bin_prefix/Perl.v5.30.3.i686-linux-gnu.tar.gz", "9f43143efaf0583bae902f579d64d25e3f5157a3ba2bf153540effba5abaabb4"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/Perl.v5.30.3.i686-linux-musl.tar.gz", "3884f2c7a373e169c94a6c604f484f54d71f97091826e7861b9d07dee99dd50f"),
    MacOS(:x86_64) => ("$bin_prefix/Perl.v5.30.3.x86_64-apple-darwin14.tar.gz", "123a6bb9dc7bc8889184dfa2342f78eb61ffad188c9f997469a1ca2cab2025c0"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/Perl.v5.30.3.x86_64-linux-gnu.tar.gz", "0413f7ca7e11fb8bfb6c3d68d2afb8b43d1bdf3b174187da794af93a1da1aab5"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/Perl.v5.30.3.x86_64-linux-musl.tar.gz", "546a3bc32f34c76ed8211c3bb0659d0dc0410a936fbc515d876f48ef6964eda5"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
